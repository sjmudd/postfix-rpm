*** postfix-20010228-pl03/src/util/dict_mysql.c.orig	Tue Jun 12 20:20:26 2001
--- postfix-20010228-pl03/src/util/dict_mysql.c	Wed Jun 13 09:10:32 2001
***************
*** 28,35 ****
  /*	Arguments:
  /* .IP name
  /*	The path of the MySQL configuration file.  The file encodes a number of
! /*	pieces of information: username, password, databasename, table,
! /*	select_field, where_field, and hosts.  For example, if you want the map to
  /*	reference databases of the name "your_db" and execute a query like this:
  /*	select forw_addr from aliases where alias like '<some username>' against
  /*	any database called "vmailer_info" located on hosts host1.some.domain and
--- 28,35 ----
  /*	Arguments:
  /* .IP name
  /*	The path of the MySQL configuration file.  The file encodes a number of
! /*	pieces of information: username, password, databasename, request,
! /*	and hosts.  For example, if you want the map to
  /*	reference databases of the name "your_db" and execute a query like this:
  /*	select forw_addr from aliases where alias like '<some username>' against
  /*	any database called "vmailer_info" located on hosts host1.some.domain and
***************
*** 39,47 ****
  /*	user = vmailer
  /*	password = passwd
  /*	DBname = vmailer_info
! /*	table = aliases
! /*	select_field = forw_addr
! /*	where_field = alias
  /*	hosts = host1.some.domain host2.some.domain
  /*
  /* .IP other_name
--- 39,46 ----
  /*	user = vmailer
  /*	password = passwd
  /*	DBname = vmailer_info
! /*	request = select forw_addr from aliases where alias like '$lookup'
! /*	request_string = $lookup
  /*	hosts = host1.some.domain host2.some.domain
  /*
  /* .IP other_name
***************
*** 104,113 ****
      char   *username;
      char   *password;
      char   *dbname;
!     char   *table;
!     char   *select_field;
!     char   *where_field;
!     char   *additional_conditions;
      char  **hostnames;
      int     len_hosts;
  } MYSQL_NAME;
--- 103,109 ----
      char   *username;
      char   *password;
      char   *dbname;
!     ARGV   *request;
      char  **hostnames;
      int     len_hosts;
  } MYSQL_NAME;
***************
*** 123,128 ****
--- 119,126 ----
  #define STATUNTRIED 2
  #define RETRY_CONN_INTV 60		/* 1 minute */
  
+ #define DEFAULT_REQUEST_STRING "$lookup"
+ 
  /* internal function declarations */
  static PLMYSQL *plmysql_init(char *hostnames[], int);
  static MYSQL_RES *plmysql_query(PLMYSQL *, const char *, char *, char *, char *);
***************
*** 160,174 ****
      pldb = dict_mysql->pldb;
      /* initialization  for query */
      query = vstring_alloc(24);
-     vstring_strcpy(query, "");
      if ((name_escaped = (char *) mymalloc((sizeof(char) * (strlen(name) * 2) +1))) == NULL) {
  	msg_fatal("dict_mysql_lookup: out of memory.");
      }
      /* prepare the query */
      mysql_escape_string(name_escaped, name, (unsigned int) strlen(name));
!     vstring_sprintf(query, "select %s from %s where %s = '%s' %s", dict_mysql->name->select_field,
!        dict_mysql->name->table, dict_mysql->name->where_field, name_escaped,
! 		    dict_mysql->name->additional_conditions);
      if (msg_verbose)
  	msg_info("dict_mysql_lookup using sql query: %s", vstring_str(query));
      /* free mem associated with preparing the query */
--- 158,173 ----
      pldb = dict_mysql->pldb;
      /* initialization  for query */
      query = vstring_alloc(24);
      if ((name_escaped = (char *) mymalloc((sizeof(char) * (strlen(name) * 2) +1))) == NULL) {
  	msg_fatal("dict_mysql_lookup: out of memory.");
      }
      /* prepare the query */
      mysql_escape_string(name_escaped, name, (unsigned int) strlen(name));
!     vstring_strcpy(query, dict_mysql->name->request->argv[0]);
!     for(i = 1; i < dict_mysql->name->request->argc; i++) {
!         vstring_strcat(query,name_escaped);
!         vstring_strcat(query,dict_mysql->name->request->argv[i]);
!     }
      if (msg_verbose)
  	msg_info("dict_mysql_lookup using sql query: %s", vstring_str(query));
      /* free mem associated with preparing the query */
***************
*** 373,383 ****
--- 372,389 ----
  static MYSQL_NAME *mysqlname_parse(const char *mysqlcf_path)
  {
      int     i;
+     int     request_str_len;
      char   *nameval;
+     char   *request;
+     char   *request_cur;
+     char   *request_str = 0;
+     char   *next;
      char   *hosts;
      MYSQL_NAME *name = (MYSQL_NAME *) mymalloc(sizeof(MYSQL_NAME));
      ARGV   *hosts_argv;
+     ARGV   *request_argv;
      VSTRING *opt_dict_name;
+     VSTRING *tmpvstring;
  
      /*
       * setup a dict containing info in the mysql cf file. the dict has a
***************
*** 412,448 ****
      if (msg_verbose)
  	msg_info("mysqlname_parse(): set database name to '%s'", name->dbname);
  
-     /* table lookup */
-     if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "table")) == NULL)
- 	msg_fatal("%s: mysql options file does not include table name", mysqlcf_path);
-     else
- 	name->table = mystrdup(nameval);
-     if (msg_verbose)
- 	msg_info("mysqlname_parse(): set table name to '%s'", name->table);
  
!     /* select field lookup */
!     if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "select_field")) == NULL)
! 	msg_fatal("%s: mysql options file does not include select field", mysqlcf_path);
!     else
! 	name->select_field = mystrdup(nameval);
!     if (msg_verbose)
! 	msg_info("mysqlname_parse(): set select_field to '%s'", name->select_field);
  
!     /* where field lookup */
!     if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "where_field")) == NULL)
! 	msg_fatal("%s: mysql options file does not include where field", mysqlcf_path);
!     else
! 	name->where_field = mystrdup(nameval);
!     if (msg_verbose)
! 	msg_info("mysqlname_parse(): set where_field to '%s'", name->where_field);
  
!     /* additional conditions */
!     if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "additional_conditions")) == NULL)
! 	name->additional_conditions = mystrdup("");
!     else
! 	name->additional_conditions = mystrdup(nameval);
!     if (msg_verbose)
! 	msg_info("mysqlname_parse(): set additional_conditions to '%s'", name->additional_conditions);
  
      /* mysql server hosts */
      if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "hosts")) == NULL)
--- 418,518 ----
      if (msg_verbose)
  	msg_info("mysqlname_parse(): set database name to '%s'", name->dbname);
  
  
!     if ((request = (char *) dict_lookup(vstring_str(opt_dict_name), "request")) == NULL) {
! 	/* try the old format of conf file */    
!         if (msg_verbose)
! 	    msg_info("mysqlname_parse(): request not found, trying old format");
! 	request_argv = argv_alloc(3);
! 	tmpvstring = vstring_alloc(30);
! 	tmpvstring = vstring_strcpy(tmpvstring, "select ");
! 
!         /* select field lookup */
!         if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "select_field")) == NULL)
! 	    msg_fatal("%s: mysql options file does not include request field", mysqlcf_path);
!         else
! 	    vstring_strcat(tmpvstring, nameval);
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set select_field to '%s'", nameval);
! 	
! 	vstring_strcat(tmpvstring, " from ");
! 
!         /* table lookup */
!         if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "table")) == NULL)
! 	    msg_fatal("%s: mysql options file does not include table field", mysqlcf_path);
!         else
! 	    vstring_strcat(tmpvstring, nameval);
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set table to '%s'", nameval);
  
! 	vstring_strcat(tmpvstring, " where ");
  
!         /* where field lookup */
!         if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "where_field")) == NULL)
! 	    msg_fatal("%s: mysql options file does not include where field", mysqlcf_path);
!         else
! 	    vstring_strcat(tmpvstring, nameval);
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set where to '%s'", nameval);
! 	
! 	vstring_strcat(tmpvstring, " = '");
! 	argv_add(request_argv, vstring_str(tmpvstring), ARGV_END);
! 
! 	vstring_strcpy(tmpvstring, "' ");
! 
!         /* additional conditions */
!         if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "additional_conditions")) == NULL)
! 	    /* void */ ;
!         else
! 	    vstring_strcat(tmpvstring, nameval);
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set additional_conditions to '%s'", (nameval == NULL?"":nameval));
! 
! 	argv_add(request_argv, vstring_str(tmpvstring), ARGV_END);
! 	argv_terminate(request_argv);
! 	vstring_free(tmpvstring);
! 
!     } else {
! 	/* new file format */
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set request to '%s'", nameval);
! 	if ((request_str = (char *) dict_lookup(vstring_str(opt_dict_name), "request_string")) == NULL)
! 	    request_str = mystrdup(DEFAULT_REQUEST_STRING);
! 	else
! 	    request_str = mystrdup(request_str);
! 	if (msg_verbose)
! 	    msg_info("mysqlname_parse(): set request_string to '%s'", nameval);
!         /* treat the request configuration option */
! 	request_argv = argv_alloc(3);
! 	request = mystrdup(request);
! 	request_cur  = request;
! 	request_str_len = strlen(request_str);
! 	while ((next = strstr(request_cur, request_str)) != NULL) {
! 	   *next = '\0';
! 	   argv_add(request_argv, request_cur, ARGV_END);
! 	   request_cur = &next[request_str_len];
! 	}
! 	argv_add(request_argv, request_cur, ARGV_END);
! 	argv_terminate(request_argv);
! 	myfree(request);
!     }
!     name->request = request_argv;
! 
!     if (msg_verbose) {
! 	if (request_str == NULL)
! 	    request_str = mystrdup(DEFAULT_REQUEST_STRING);
! 	tmpvstring = vstring_alloc(40);
! 	vstring_strcpy(tmpvstring, name->request->argv[0]);
!          for(i = 1; i < name->request->argc; i++) {
!             vstring_strcat(tmpvstring, request_str);
!             vstring_strcat(tmpvstring, name->request->argv[i]);
!         }
! 	msg_info("mysqlname_parse(): request is : %s", vstring_str(tmpvstring));
! 	vstring_free(tmpvstring);
!     }
! 
!     if (request_str != NULL)
! 	myfree(request_str);
  
      /* mysql server hosts */
      if ((nameval = (char *) dict_lookup(vstring_str(opt_dict_name), "hosts")) == NULL)
***************
*** 469,474 ****
--- 539,545 ----
  		     name->hostnames[i]);
      }
      myfree(hosts);
+     dict_unregister(vstring_str(opt_dict_name));
      vstring_free(opt_dict_name);
      argv_free(hosts_argv);
      return name;
***************
*** 524,533 ****
      myfree(dict_mysql->name->username);
      myfree(dict_mysql->name->password);
      myfree(dict_mysql->name->dbname);
!     myfree(dict_mysql->name->table);
!     myfree(dict_mysql->name->select_field);
!     myfree(dict_mysql->name->where_field);
!     myfree(dict_mysql->name->additional_conditions);
      for (i = 0; i < dict_mysql->name->len_hosts; i++) {
  	myfree(dict_mysql->name->hostnames[i]);
      }
--- 595,601 ----
      myfree(dict_mysql->name->username);
      myfree(dict_mysql->name->password);
      myfree(dict_mysql->name->dbname);
!     argv_free(dict_mysql->name->request);
      for (i = 0; i < dict_mysql->name->len_hosts; i++) {
  	myfree(dict_mysql->name->hostnames[i]);
      }

