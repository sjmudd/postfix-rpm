#!/bin/sh
#
# $Header: /home/sjmudd/tmp/cvsroot/postfix-rpm/buildpackage,v 2.24.2.2 2004/07/18 21:59:42 sjmudd Exp $
#
# Shell script used to build my packages
# - checks if the needed files exist and retrieve them
# - checks if the files have been changed against those stored in the CVS
#   repository
#
[ -n "$DEBUG" ] && set -x
#set -x
myname=$(basename $0)

# add the file if $add is blank
add_to_pkg_sourcelist () {
    local file=$1
    local filelist=$2
    local add=$3

    if [ -z "${add}" ]; then
        echo ${file} >> ${filelist} && \
        sort < ${filelist} > ${filelist}.n && \
            mv ${filelist}.n ${filelist} || {
                echo "Failed to update ${filelist}!"
                exit 1
        }
    fi
}

# download_if_necessary to srcdir base/file if not already there
#
# add_file:
# leave blank unless you want to disable updating the filelist
# for example with the postfix source tar ball

download_if_necessary () {
    local srcdir=$1
    local base=$2
    local file=$3
    local add_file=$4

    echo -n "	--> checking ${file} ..."
    if [ ! -f "${srcdir}/${file}" ]; then
        echo " not found"
	echo "	downloading from ${base} to ${srcdir}..."
        (
            cd ${srcdir} && \
            wget ${base}/${file} && \
	    add_to_pkg_sourcelist ${file} ${pkgdir}/pkg-sourcelist ${add_file}
        )
    else
        echo " OK"
    fi
}

# Test prep stage for different patches - do they apply cleanly?
test_patches () {
    [ "${test_patches}" = 1 ] && sh test-patches
}

# Perform the package build
build () {
( cd ${srcdir} && \
  sh make-postfix.spec && \
  chmod u+w ${specdir}/postfix.spec && \
  cd ${specdir} && \
  sleep 2 && \
  echo "" && \
  echo "===> building RPM package (output to ${build_output})..." && \
  if [ -z "$sign" ]; then echo "	NOT signing package"; fi && \
  $RPM -ba $sign postfix.spec ) 2>&1 | tee ${build_output}
}

# Initialize.
# By now, shells must have functions. Ultrix users must use sh5 or lose.

umask 022
PATH=/bin:/usr/bin:/usr/sbin:/usr/etc:/sbin:/etc:/usr/contrib/bin:/usr/gnu/bin:/usr/ucb:/usr/bsd
SHELL=/bin/sh
IFS="
"
BACKUP_IFS="$IFS"
build_output=build-output
pkgdir=`pwd`
sign='--sign'
test_patches=0
 
USAGE="Usage: $myname [name=value] [option]
    --no-check              Do not check if the files have changed against the version stored in cvs.
    --no-sign               Do not sign the package.
    --test-patches          test the patches
                            postfix-test-patch-results
    name=value              Specify an installation parameter".
 
# Process command-line options and parameter settings. Work around
# brain damaged shells. "IFS=value command" should not make the
# IFS=value setting permanent. But some broken standard allows it.
 
for arg
do
    case $arg in
           *=*) IFS= eval $arg; IFS="$BACKUP_IFS";;
    --no-check) no_check=1;;
     --no-sign) sign=;;
--test-patches) test_patches=1;;
             *) echo $myname: Error: $USAGE 1>&2; exit 1;;
    esac
    shift
done

# check whether rpmbuild exists and complain if it doesn't
RPM=/usr/bin/rpmbuild

[ -x $RPM ] || {
    echo "$RPM not found, please install it first"
    exit 1
}

##############################################################################
#
# Check the build environment
#

srcdir=$(rpm --eval '%{_sourcedir}' | sed 's;%{name};postfix;')
specdir=$(rpm --eval '%{_specdir}' | sed 's;%{name};postfix;')
cat <<EOF

$myname (C) 2004 Simon J Mudd <sjmudd@pobox.com>

===> checking environment information:
	specdir=$specdir
	srcdir=$srcdir

EOF

##############################################################################
#
# Check postfix tar ball has been download
#
# convert 
#	Source0: ftp://ftp.porcupine.org/mirrors/postfix-release/%{ftp_dir}/postfix-%{version1}.tar.gz
# into one of the following
#	ftp://ftp.porcupine.org/mirrors/postfix-release/official/postfix-1.1.0.tar.gz
#	ftp://ftp.porcupine.org/mirrors/postfix-release/experimental/postfix-1.1.0-20020115.tar.gz

V_postfix=`grep '^%define V_postfix ' postfix.spec.in | awk '{ print $3 } '`
V_release_date=`grep '^%define V_release_date' postfix.spec.in | awk '{ print $3 } '`
rpm_release=`grep '^%define rel ' postfix.spec.in | awk '{ print $3 } '`

if grep -q '%define official 1' postfix.spec.in
then
    ftpdir=official
else
    V_postfix="${V_postfix}-${V_release_date}"
    ftpdir=experimental
fi

source0=`grep "^Source0:" postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{ftp_dir};${ftpdir};" -e "s;%{V_postfix};${V_postfix};"`

file="postfix-${V_postfix}.tar.gz"
base=`dirname ${source0}`

cat <<EOF
===> checking Postfix:
	V_postfix:		${V_postfix}
	Release Date:		${V_release_date}
	Postfix tarball name:	${file}
	URL location:		${base}
	RPM Release:		${rpm_release}
EOF

download_if_necessary ${srcdir} ${base} ${file} NO_UPDATE_PKG_SOURCELIST

# Look for the TLS patches
#	Source9: ftp://ftp.aet.tu-cottbus.de/pub/postfix_tls/pfixtls-%{V_tls}.tar.gz  

V_tls=`grep '^%define V_tls' postfix.spec.in | awk '{ print $3 } '`
source0=`grep '^Source9: ftp://ftp.aet.tu-cottbus.de' postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{V_tls};${V_tls};"`

base=`dirname ${source0}`
file=`echo ${source0} | sed -e 's;.*/;;'`

cat <<EOF

===> checking TLS patches...
	V_tls:			${V_tls}
	TLS patch tarball name:	${file}
	URL location:		${base}
EOF
download_if_necessary . ${base} ${file}

# Look for VDA Patch
# Patch4: http://ftp.oav.net/others/postfix/VDA/postfix-%{V_vda}_quota.patch.gz
V_vda=`grep '^%define V_vda' postfix.spec.in | awk '{ print $3 }'`
patch4=`grep '^Patch4: .*/postfix/VDA/postfix' postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{V_vda};${V_vda};"`

base=`dirname ${patch4}`
file=`echo ${patch4} | sed -e 's;.*/;;'`

cat <<EOF

===> checking VDA patches...
	V_vda:			${V_vda}
	VDA patch tarball name:	${file}
	URL location:		${base}
EOF
download_if_necessary . ${base} ${file}

cat <<EOF

===> checking CVS Status
EOF
if [ $no_check ]; then
    echo "	NOT checking repository."
else
    echo "	checking files in repository..."
    cvs diff 2>&1 >/dev/null || {
	echo ""
	echo "WARNING Commit changes before building, or use the --no-check option"
	exit 1;
    }
fi
echo ""

sh linkfiles --quiet --delete
sh linkfiles --create
test_patches	# Just check the patches here
build
echo ""
sh linkfiles --delete
