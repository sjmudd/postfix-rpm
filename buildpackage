#!/bin/sh
#
# Shell script used to build my packages
# - checks if the needed files exist and retrieve them
# - checks if the files have been changed against those stored in the CVS
#   repository
#

# Initialize.
# By now, shells must have functions. Ultrix users must use sh5 or lose.

umask 022
PATH=/bin:/usr/bin:/usr/sbin:/usr/etc:/sbin:/etc:/usr/contrib/bin:/usr/gnu/bin:/usr/ucb:/usr/bsd
SHELL=/bin/sh
IFS="
"
BACKUP_IFS="$IFS"
build_output=build-output
current_directory=`pwd`
sign='--sign'
test_tls=1
test_vda=1
 
USAGE="Usage: $0 [name=value] [option]
    --no-check              Do not check if the files have changed against the version stored in cvs.
    --no-sign               Do not sign the package.
    --no-test-tls           Do not test the TLS patches apply cleanly before building the package
    --no-test-vda           Do not test the VDA patches apply cleanly before building the package
    name=value              Specify an installation parameter".
 
# Process command-line options and parameter settings. Work around
# brain damaged shells. "IFS=value command" should not make the
# IFS=value setting permanent. But some broken standard allows it.
 
for arg
do
    case $arg in
          *=*) IFS= eval $arg; IFS="$BACKUP_IFS";;
   --no-check) no_check=1;;
    --no-sign) sign=;;
--no-test-tls) test_tls=0;;
--no-test-vda) test_vda=0;;
            *) echo $0: Error: $USAGE 1>&2; exit 1;;
    esac
    shift
done

# download_if_necessary to srcdir base/file if not already there

download_if_necessary() {
    local srcdir=$1
    local base=$2
    local file=$3
    echo -n "===> checking for ${file} ..."
    if [ ! -f "${srcdir}/${file}" ]; then
        echo " not found"
	echo "	downloading to ${srcdir} from ${base}..."
        ( cd ${srcdir} && wget ${base}/${file} || {
            echo 'Failed!'
            exit 1
        }
        )
    else
        echo " found"
    fi
}

# Test the rpm prep stage for TLS patches - do they apply cleanly?
testtls () {
    [ "${test_tls}" = 1 ] && {
    echo ""
    echo "===> testing TLS patches"
    ( cd ${srcdir} && \
      POSTFIX_TLS=1 sh make-postfix.spec && \
      cd ${specdir} && \
      rpmbuild -bp postfix.spec ) || { echo "===> testing TLS patches: ** FAILED **"; exit 1; }
      echo "===> testing TLS patches: ** OK **"
      echo ""
    }
}

# Test the rpm prep stage for VDA patches - do they apply cleanly?
testvda () {
    [ "${test_vda}" = 1 ] && {
    echo ""
    echo "===> testing VDA patches"
    ( cd ${srcdir} && \
      POSTFIX_VDA=1 sh make-postfix.spec && \
      cd ${specdir} && \
      rpmbuild -bp postfix.spec ) || { echo "===> testing VDA patches: ** FAILED **"; exit 1; }
      echo "===> testing VDA patches: ** OK **"
      echo ""
    }
}

# Perform the package build
build () {
( cd ${srcdir} && \
  sh make-postfix.spec && \
  chmod u+w ${specdir}/postfix.spec && \
  cd ${specdir} && \
  sleep 2 && \
  echo "" && \
  echo "===> building RPM package" && \
  echo "	output to ${build_output}..." && \
  if [ -z "$sign" ]; then echo "	NOT signing package"; fi && \
  rpmbuild -ba $sign postfix.spec ) 2>&1 | tee ${build_output}
}

# Check postfix tar ball has been download

version=`grep '^%define ver ' postfix.spec.in | awk '{ print $3 } '`
mail_release_date=`grep '^%define mail_release_date' postfix.spec.in | awk '{ print $3 } '`
rpm_release=`grep '^%define rel ' postfix.spec.in | awk '{ print $3 } '`

RC=`grep -q '%define official 1' postfix.spec.in; echo $?`
if [ ${RC} = "0" ]; then
    ftpdir=official
else
    version="${version}-${mail_release_date}"
    ftpdir=experimental
fi

# convert 
#	Source0: ftp://ftp.porcupine.org/mirrors/postfix-release/%{ftp_dir}/postfix-%{version1}.tar.gz
# into one of
#	ftp://ftp.porcupine.org/mirrors/postfix-release/official/postfix-1.1.0.tar.gz
#	ftp://ftp.porcupine.org/mirrors/postfix-release/experimental/postfix-1.1.0-20020115.tar.gz

source0=`grep "^Source0:" postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{ftp_dir};${ftpdir};" -e "s;%{version1};${version};"`

file="postfix-${version}.tar.gz"
base=`dirname ${source0}`
srcdir=`rpm --eval '%{_sourcedir}'`
specdir=`rpm --eval '%{_specdir}'`

cat <<EOF
===> checking postfix.spec.in:
	postfix version:	${version}
	Release Date:		${mail_release_date}
	Postfix tarball name:	${file}
	URL location:		${base}
	RPM Release:		${rpm_release}
===> checking environment information:
	specdir=$specdir
	srcdir=$srcdir
EOF

echo "===> checking for Postfix tar ball"

download_if_necessary ${srcdir} ${base} ${file}

# Look for the TLS patches
#	Source9: ftp://ftp.aet.tu-cottbus.de/pub/postfix_tls/%{pfixtls}.tar.gz  

pfixtls=`grep '^%define pfixtls' postfix.spec.in | awk '{ print $3 } '`
source0=`grep '^Source9: ftp://ftp.aet.tu-cottbus.de' postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{pfixtls};${pfixtls};"`

base=`dirname ${source0}`
file=`echo ${source0} | sed -e 's;.*/;;'`

cat <<EOF
===> checking TLS patches...
	pfixtls:		${pfixtls}
	TLS patch tarball name:	${file}
	URL location:		${base}
EOF
download_if_necessary . ${base} ${file}

# Look for VDA Patch
# Patch4: http://ftp.oav.net/others/postfix/VDA/postfix-%{vdaver}_quota.patch.gz
vdaver=`grep '^%define vdaver' postfix.spec.in | awk '{ print $3 } '`
patch4=`grep '^Patch4: http://ftp.oav.net/others/postfix/VDA/postfix' postfix.spec.in | awk '{ print $2 }' | sed -e "s;%{vdaver};${vdaver};"`

base=`dirname ${patch4}`
file=`echo ${patch4} | sed -e 's;.*/;;'`

cat <<EOF
===> checking VDA patches...
	vdaver:			${vdaver}
	VDA patch tarball name:	${file}
	URL location:		${base}
EOF
download_if_necessary . ${base} ${file}

echo "===> checking CVS Status"
if [ $no_check ]; then
    echo "	NOT checking cvs repository."
else
    echo "	checking files with cvs repository..."
    cvs diff 2>&1 >/dev/null || {
	echo ""
	echo "WARNING please commit changes before building";
	exit 1;
    }
fi
echo ""

sh removelinks --quiet
sh makelinks
testtls
testvda
build
echo ""
sh removelinks
