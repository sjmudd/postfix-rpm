 PGSQL_README          |   26 +++++-
 src/util/dict_pgsql.c |  198 ++++++++++++++++++++++----------------------------
 src/util/dict_pgsql.h |   46 ++++++-----
 3 files changed, 136 insertions(+), 134 deletions(-)
diff -u --recursive snapshot-20020111.old/PGSQL_README snapshot-20020111/PGSQL_README
--- snapshot-20020111.old/PGSQL_README	Sun Jan 13 08:25:16 2002
+++ snapshot-20020111/PGSQL_README	Wed Jan 16 17:21:29 2002
@@ -42,15 +42,27 @@
 # the database name on the servers
 dbname = customer_database
 
-# the table name
-table = mxaliases
+# the table name (obsolete in raw version)
+# table = mxaliases
 
 #
-select_field = forw_addr
-where_field = alias
+# select_field = forw_addr (non-raw)
 
-# you may specify additional_conditions here
-additional_conditions = and status = 'paid'
+select_field = select forw_addr from mxaliases where alias = '%s' and status = 'paid'
+
+# %s is the equivalent of $lookup from the explanation below; it is escaped
+# before being inserted into the select field;
+
+split_email = true
+
+# If the key contains an '@' character, this option will split the key in two 
+# strings - the user and the domain; you may use two instances of '%s' in
+# 'select_field' -- the first stands for the user string, the second stands for # the domain string.
+
+# where_field = alias (obsolete in raw version)
+
+# you may specify additional_conditions here (obsolete in raw version)
+# additional_conditions = and status = 'paid'
 
 # the above variables will result in a query of
 # the form: 
@@ -86,3 +98,5 @@
 maps will generate lots of concurrent pgsql clients, so the pgsql
 server(s) should be run with this fact in mind.  Any further
 performance information, in addition to any feedback is most welcome.
+
+[NOTE: this is the 'raw version' of Mathieu's code, use with care]
diff -u --recursive snapshot-20020111.old/src/util/dict_pgsql.c snapshot-20020111/src/util/dict_pgsql.c
--- snapshot-20020111.old/src/util/dict_pgsql.c	Sun Jan 13 08:25:16 2002
+++ snapshot-20020111/src/util/dict_pgsql.c	Mon Jan 14 11:54:18 2002
@@ -1,71 +1,78 @@
 
 /*++
-/* NAME
-/*	dict_pgsql 3
-/* SUMMARY
-/*	dictionary manager interface to db files
-/* SYNOPSIS
-/*	#include <dict.h>
-/*	#include <dict_pgsql.h>
-/*
-/*	DICT	*dict_pgsql_open(name, dummy, unused_dict_flags)
-/*	const char	*name;
-/*	int     dummy;
-/*	int     unused_dict_flags;
-/* DESCRIPTION
-/*	dict_pgsql_open() creates a dictionary of type 'pg'.  This
-/*	dictionary is an interface for the postfix key->value mappings
-/*	to pgsql.  The result is a pointer to the installed dictionary,
-/*	or a null pointer in case of problems.
-/*
-/*	The pgsql dictionary can manage multiple connections to different
-/*	sql servers on different hosts.  It assumes that the underlying data
-/*	on each host is identical (mirrored) and maintains one connection
-/*	at any given time.  If any connection fails,  any other available
-/*	ones will be opened and used.  The intent of this feature is to eliminate
-/*	a single point of failure for mail systems that would otherwise rely
-/*	on a single pgsql server.
-/*
-/*	Arguments:
-/* .IP name
-/*	The path of the PostgreSQL configuration file.  The file encodes a number of
-/*	pieces of information: username, password, databasename, table,
-/*	select_field, where_field, and hosts.  For example, if you want the map to
-/*	reference databases of the name "your_db" and execute a query like this:
-/*	select forw_addr from aliases where alias like '<some username>' against
-/*	any database called "vmailer_info" located on hosts host1.some.domain and
-/*	host2.some.domain, logging in as user "vmailer" and password "passwd" then
-/*	the configuration file should read:
-/*
-/*	user = vmailer
-/*	password = passwd
-/*	DBname = vmailer_info
-/*	table = aliases
-/*	select_field = forw_addr
-/*	where_field = alias
-/*	hosts = host1.some.domain host2.some.domain
-/*
-/* .IP other_name
-/*	reference for outside use.
-/* .IP unusued_flags
-/*	unused flags
-/* SEE ALSO
-/*	dict(3) generic dictionary manager
-/* AUTHOR(S)
-/*      Mathieu Arnold
-/*      Absolight
-/*      mat@absolight.com
-/*      
-/*      based on dict_mysql by
-/*      
-/*	Scott Cotton
-/*	IC Group, Inc.
-/*	scott@icgroup.com
-/*
-/*	Joshua Marcus
-/*	IC Group, Inc.
-/*	josh@icgroup.com
-/*--*/
+ * NAME
+ *	dict_pgsql 3 raw version (based on 99.999% of Mathieu Arnold's dict)
+ * SUMMARY
+ *	dictionary manager interface to db_pgsql
+ * SYNOPSIS
+ *	#include <dict.h>
+ *	#include <dict_pgsql.h>
+ *
+ *	DICT	*dict_pgsql_open(name, dummy, unused_dict_flags)
+ *	const char	*name;
+ *	int     dummy;
+ *	int     unused_dict_flags;
+ * DESCRIPTION
+ *	dict_pgsql_open() creates a dictionary of type 'pg'.  This
+ *	dictionary is an interface for the postfix key->value mappings
+ *	to pgsql.  The result is a pointer to the installed dictionary,
+ *	or a null pointer in case of problems.
+ *
+ *	The pgsql dictionary can manage multiple connections to different
+ *	sql servers on different hosts.  It assumes that the underlying data
+ *	on each host is identical (mirrored) and maintains one connection
+ *	at any given time.  If any connection fails,  any other available
+ *	ones will be opened and used.  The intent of this feature is to eliminate
+ *	a single point of failure for mail systems that would otherwise rely
+ *	on a single pgsql server.
+ *
+ *	Arguments:
+ * .IP name
+ *	The path of the PostgreSQL configuration file.  The file encodes a number of
+ *	pieces of information: username, password, databasename, select_field,
+ *	split_email.
+ *	The last one encodes the raw query to be sent to the database server. The
+ *	key field is encoded using the printf convention.
+ *	
+ *	For example, if you want the map to reference databases of the name 
+ *	"your_db" and execute a query like this:
+ *	select forw_addr from aliases where alias like '<some username>' against
+ *	any database called "vmailer_info" located on hosts host1.some.domain and
+ *	host2.some.domain, logging in as user "vmailer" and password "passwd" then
+ *	the configuration file should read:
+ *
+ *	user = vmailer
+ *	password = passwd
+ *	DBname = vmailer_info
+ *	select_field = "select forw_addr from aliases where alias_name like '%s'" and alias_domain like '%s'
+ *	hosts = host1.some.domain host2.some.domain
+ *	split_email = true
+ *
+ * .IP other_name
+ *	reference for outside use.
+ * .IP unusued_flags
+ *	unused flags
+ * SEE ALSO
+ *	dict(3) generic dictionary manager
+ * AUTHOR(S)
+ *      Mathieu Arnold
+ *      Absolight
+ *      mat@absolight.com
+ *
+ *	georgeb (raw version part) 
+ *	intelinet.ro SRL
+ *	georgeb@intelinet.ro
+ *      
+ *      based on dict_mysql by
+ *      
+ *	Scott Cotton
+ *	IC Group, Inc.
+ *	scott@icgroup.com
+ *
+ *	Joshua Marcus
+ *	IC Group, Inc.
+ *	josh@icgroup.com
+ *--*/
 
 /* System library. */
 #include "sys_defs.h"
@@ -114,10 +121,8 @@
     char   *username;
     char   *password;
     char   *dbname;
-    char   *table;
     char   *select_field;
-    char   *where_field;
-    char   *additional_conditions;
+    int     split_email;
     char  **hostnames;
     int     len_hosts;
 } PGSQL_NAME;
@@ -169,6 +174,7 @@
             j,
             numrows;
     char   *name_escaped = 0;
+    char   *domain_escaped = NULL;
 
     dict_pgsql = (DICT_PGSQL *) dict;
     pldb = dict_pgsql->pldb;
@@ -184,10 +190,15 @@
       }
     /* prepare the query */
     pgsql_escape_string (name_escaped, name, (unsigned int) strlen (name));
-    vstring_sprintf (query, "select %s from %s where %s = '%s' %s",
-		     dict_pgsql->name->select_field, dict_pgsql->name->table,
-		     dict_pgsql->name->where_field, name_escaped,
-		     dict_pgsql->name->additional_conditions);
+    if (dict_pgsql->name->split_email==1)
+	    domain_escaped=strchr(name_escaped,'@');
+    if (domain_escaped && *domain_escaped) {
+	    *domain_escaped='\0'; domain_escaped++;
+    }
+    if (domain_escaped && *domain_escaped)
+	    vstring_sprintf (query, dict_pgsql->name->select_field, name_escaped, domain_escaped);
+    else
+	    vstring_sprintf (query, dict_pgsql->name->select_field, name_escaped);
     if (msg_verbose)
 	msg_info ("dict_pgsql_lookup using sql query: %s",
 		  vstring_str (query));
@@ -481,17 +492,6 @@
 	msg_info ("pgsqlname_parse(): set database name to '%s'",
 		  name->dbname);
 
-    /* table lookup */
-    if (
-	(nameval =
-	 (char *) dict_lookup (vstring_str (opt_dict_name), "table")) == NULL)
-	msg_fatal ("%s: pgsql options file does not include table name",
-		   pgsqlcf_path);
-    else
-	name->table = mystrdup (nameval);
-    if (msg_verbose)
-	msg_info ("pgsqlname_parse(): set table name to '%s'", name->table);
-
     /* select field lookup */
     if (
 	(nameval =
@@ -508,31 +508,18 @@
 	msg_info ("pgsqlname_parse(): set select_field to '%s'",
 		  name->select_field);
 
-    /* where field lookup */
+    /* split email lookup */
     if (
 	(nameval =
 	 (char *) dict_lookup (vstring_str (opt_dict_name),
-			       "where_field")) == NULL)
-	msg_fatal ("%s: pgsql options file does not include where field",
-		   pgsqlcf_path);
-    else
-	name->where_field = mystrdup (nameval);
-    if (msg_verbose)
-	msg_info ("pgsqlname_parse(): set where_field to '%s'",
-		  name->where_field);
-
-    /* additional conditions */
-    if (
-	(nameval =
-	 (char *) dict_lookup (vstring_str (opt_dict_name),
-			       "additional_conditions")) == NULL)
-	name->additional_conditions = mystrdup ("");
+			       "split_email")) == NULL)
+	    name->split_email = 0;
     else
-	name->additional_conditions = mystrdup (nameval);
+	name->split_email = 1;
     if (msg_verbose)
-	msg_info ("pgsqlname_parse(): set additional_conditions to '%s'",
-		  name->additional_conditions);
-
+	msg_info ("pgsqlname_parse(): set split_email to '%d'",
+		  name->split_email);
+    
     /* pgsql server hosts */
     if (
 	(nameval =
@@ -624,10 +611,7 @@
     myfree (dict_pgsql->name->username);
     myfree (dict_pgsql->name->password);
     myfree (dict_pgsql->name->dbname);
-    myfree (dict_pgsql->name->table);
     myfree (dict_pgsql->name->select_field);
-    myfree (dict_pgsql->name->where_field);
-    myfree (dict_pgsql->name->additional_conditions);
     for (i = 0; i < dict_pgsql->name->len_hosts; i++)
       {
 	  myfree (dict_pgsql->name->hostnames[i]);
diff -u --recursive snapshot-20020111.old/src/util/dict_pgsql.h snapshot-20020111/src/util/dict_pgsql.h
--- snapshot-20020111.old/src/util/dict_pgsql.h	Sun Jan 13 08:25:16 2002
+++ snapshot-20020111/src/util/dict_pgsql.h	Sun Jan 13 08:26:11 2002
@@ -2,16 +2,16 @@
 #define _DICT_PGSQL_H_INCLUDED_
 
 /*++
-/* NAME
-/*	dict_pgsql 3h
-/* SUMMARY
-/*	dictionary manager interface to pgsql databases
-/* SYNOPSIS
-/*	#include <dict_pgsql.h>
-/* DESCRIPTION
-/* .nf
+ * NAME
+ *	dict_pgsql 3h raw version (based on 99.999% of Mathieu Arnold's dict)
+ * SUMMARY
+ *	dictionary manager interface to pgsql databases
+ * SYNOPSIS
+ *	#include <dict_pgsql.h>
+ * DESCRIPTION
+ * .nf
 
- /*
+  *
   * Utility library.
   */
 #include <dict.h>
@@ -24,18 +24,22 @@
 extern DICT *dict_pgsql_open (const char *, int, int);
 
 /* LICENSE
-/* .ad
-/* .fi
-/*	The Secure Mailer license must be distributed with this software.
-/* AUTHOR(S)
-/*	Scott Cotton
-/*	IC Group, Inc.
-/*	scott@icgroup.com
-/*
-/*	Joshua Marcus
-/*	IC Group, Inc.
-/*	josh@icgroup.com
-/*--*/
+ * .ad
+ * .fi
+ *	The Secure Mailer license must be distributed with this software.
+ * AUTHOR(S)
+ *	Scott Cotton
+ *	IC Group, Inc.
+ *	scott@icgroup.com
+ *
+ *	Joshua Marcus
+ *	IC Group, Inc.
+ *	josh@icgroup.com
+ *
+ *	georgeb (raw version part)
+ *	intelinet.ro SRL
+ *	office@intelinet.ro
+ *--*/
 
 #endif
 
